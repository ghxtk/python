//Кузнечик
//Кузнечик прыгает из точки 0 на координатной прямой вперед. Первый прыжок имеет длину 1, второй — длину 2, третий — длину 3 и так далее. 
//По заданному n выведите координаты всех точек приземления, если он совершает n прыжков. 
//Например, если n=3, то он приземлится сначала в точке 1, потом в точке 3, а затем в точке 6.

import itertools

n = int(input())
a = [i for i in range(1, n + 1)]
print(' '.join(str(x) for x in itertools.accumulate(a)))

//Любопытное выражение
//Рассмотрим сумму вида 1^2−(1+2)^2+(1+2+3)^2−(1+2+3+4)^2+(1+2+3+4+5)^2−….
//По заданному целому положительному числу n выведите сумму из n членов, описанную формулой выше.

import itertools

n = int(input())
a = [i for i in range(1, n + 1)]
b = itertools.accumulate(a)
ch = -1
sum = 0
for x in b:
    ch *= -1
    sum += x * x * ch
print(sum)

//Кузнечик-2
//Кузнечик прыгает вправо из точки 0 на координатной прямой. Первый прыжок имеет длину 1. 
//Дальше прыжок удлиняется по следующему правилу: i-й прыжок на i длиннее предыдущего. 
//Пр, второй прыжок имеет длину 3, а третий прыжок имеет длину 6. По заданному n выведите координаты всех точек приземления кузнечика, если он совершает n прыжков.
//Например, если n=3, то он приземлится сначала в точке 1, потом в точке 4, а затем в точке 10.

import itertools

n = int(input())
a = [0]*n
a[0] = 1
for i in range(2, n + 1):
    a[i - 1] = a[i - 2] + i
b = itertools.accumulate(a)
print(' '.join(str(x) for x in b))

//Задача 1. Перестановки с повторениями
//Перестановкой с повторениями называется упорядоченный набор из n чисел от 1 до n, причем одно число может встречаться в наборе несколько раз. 
//Будем говорить, что перестановка с повторениями P=(p1,p2,…,pn) лексикографически меньше перестановки с повторениями Q=(q1,q2,…,qn),
//если существует такой номер i от 1 до n, что pj=qj при j<i и pi<qi. Выведите все перестановки с повторениями из n элементов в лексикографическом порядке.

import itertools

n = int(input())
a = [i for i in range(1, n + 1)]
b = list(itertools.product(a, repeat = n))
print(len(b))
for i in range(len(b)):
    print(' '.join(str(x) for x in b[i]))
    
//Задача 3. Размещения с повторениями
//Размещением с повторениями (из n по k) называется упорядоченный набор из k чисел от 1 до n, причем одно число может встречаться в наборе несколько раз. 
//Выведите все размещения с повторениями из n по k в лексикографическом порядке.

from itertools import product

n, m = map(int, input().split())
b = (list(product(range(1, n + 1, 1), repeat = m)))
print(len(b))
for i in range(len(b)):
    print(' '.join(str(x) for x in b[i]))
    
//Задача 4. Числа в p-ичной системе счисления
//Выведите все k-значные числа в p-ичной системе счисления. Числа с лидирующими нулями выводить не нужно.

import itertools

k, p = map(int, input().split())
a = list(i for i in range(p))
perms = list(itertools.product(a, repeat=k))
perms = list(i for i in perms if i[0] != 0)
print(len(perms))
for i in perms:
    print(''.join(str(j) for j in i))
    
//Задача 6. Перестановки
//Перестановкой называется упорядоченный набор из n чисел от 1 до n, в котором каждое число встречается ровно один раз. 
//Выведите все перестановки из n элементов в лексикографическом порядке.

import itertools

n = int(input())
a = [i for i in range(1, n + 1)]
b = list(itertools.permutations(a))
print(len(b))
for i in range(len(b)):
    print(' '.join(str(x) for x in b[i]))
    
//адача 7. Сочетания
//Сочетанием из n по m называется неупорядоченный набор из m различных чисел от 1 до n. Сгенерируйте все сочетания из n по m в лексикографическом порядке. 
//Лексикографический порядок для сочетаний означает,
//что сначала элементы внутри сочетания упорядочиваются по возрастанию, а затем сами сочетания упорядочиваются лексикографически как векторы длины m.

import itertools

n, m = map(int, input().split())
a = [i for i in range(1, n + 1)]
b = list(itertools.combinations(a, m))
print(len(b))
for i in range(len(b)):
    print(' '.join(str(x) for x in b[i]))
