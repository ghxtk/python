//Римские цифры
//Дана буква английского алфавита. Если это I, V, X, L, C, D, M, то выдать десятичное значение данной римской цифры, иначе вывести число 0.

d = {'I' : 1, 'V' : 5, 'X' : 10, 'L' : 50, 'M' : 1000, 'D' : 500, 'C' : 100}
r = input()
print(d.get(r, 0) )

//Выбор. Задача 4
//Дан номер карты k, необходимо определить достоинство карты. Достоинства определяются по следующему правилу: 
//Ace−14, King−13, Queen−12, Jack−11, ten−10, ..., six−6.

d = {6 : 'six', 7 : 'seven', 8 : 'eight', 9 : 'nine', 10 : 'ten', 11 : 'Jack', 12 : 'Queen', 13 : 'King', 14 : 'Ace'}
r = int(input())
print(d.get(r))

//Выбор. Задача 5

//Даны числа m — порядковый номер масти, и k — номер достоинства карты. 
//Масти нумеруются следующим образом: spades−1, clubs−2, diamonds−3, hearts−4. 
//Достоинства определяются по следующему правилу: ace−14, king−13, queen−12, jack−11, ten−10, ..., six−6. Определить полное название соответствующей карты в формате 
//"the достоинство of масть", например, "the ace of spades".

d1 = {6 : 'six', 7 : 'seven', 8 : 'eight', 9 : 'nine', 10 : 'ten', 11 : 'jack', 12 : 'queen', 13 : 'king', 14 : 'ace'}
d2 = {1 : 'spades', 2 : 'clubs', 3 : 'diamonds', 4 : 'hearts' }
m, k = map(int, input().split())
print('the ' + d1.get((k)) + ' of ' + d2.get(m))

//ЕГЭ. Задача 16
//Вам дан текст на английском языке, заканчивающийся точкой (другие символы "." в этом файле отсутствуют).
//Необходимо определить английскую букву, встречающуюся в этом тексте чаще всего, и количество там таких букв.
//Строчные и прописные буквы при этом считаются неразличимыми.
//Если искомых букв несколько, то программа должна выводить первую из них по алфавиту.
//Например, пусть файл содержит следующую запись: "It is not a simple task.".
//Чаще всего здесь встречаются буквы i, s и t.
//Следовательно, в данном случае программа должна вывести два символа, разделенных пробелом: i 3.

c = ""
d = {}
while c.find('.') == -1:
    c = input()
    for i in c:
        if (i != ' '):
            if (d.get(i.lower()) == None):
                d[i.lower()] = 1
            else:
                d[i.lower()] += 1
d.pop('.')
a = d.items()
a = sorted(a, key=lambda x: x[0])
a = sorted(a, key=lambda x: x[1], reverse=True)
print(a[0][0], a[0][1])

//ЕГЭ. Задача 19
//Вам дана строка, состоящая из строчных букв английского алфавита и заканчивающаяся символом "." (точка).
//Требуется написать программу, которая будет выводить буквы, встречающиеся во входной последовательности, в порядке уменьшения частоты их встречаемости.

c=input()
d={}
for i in c:
    if(d.get(i)==None):
        d[i]=1
    else:
        d[i]+=1
d.pop('.')
a=d.items()
a=sorted(a,key=lambda x:x[0])
a=sorted(a,key=lambda x:x[1],reverse=True)
for i in a:
    print(i[0],end='')
    
//Две строки 3
//Даны две строки. Определить, можно ли из букв первой строки получить вторую строку.
//Каждая буква второй строки должна входить в первое слово как минимум столько же раз, сколько раз она встречается во втором.    
 
a = input()
d1 = {str.lower(x): a.count(str.lower(x)) for x in set(a)}
b = input()
d2 = {str.lower(x): b.count(str.lower(x)) for x in set(b)}
count = 0
for i in set(a):
    if d1.get(i) >= d2.get(i, 0):
        if d2.get(i, 0) != 0:
            count += 1
if (count != 0):
    if (count >= len(d1) & len(d2) <= len(d1)):
        print('True')
    else:
        print('False')
else:
    print('False')
    
//ЕГЭ 2012-1
//В международном конкурсе певцов принимают участие не более 14 представителей разных стран, по одному из каждой страны. 
//Победитель определяется при помощи интернет-голосования телезрителей и радиослушателей, которые указывают название страны наиболее понравившегося им певца. 
//Вам предлагается написать эффективную, в том числе по используемой памяти, программу, 
//которая будет статистически обрабатывать приходящие на сервер голоса, чтобы определить победителя. 
//Следует учитывать, что количество голосов в списке может быть очень велико.
//Программа должна вывести названия всех стран, встречающихся в списке, в порядке убывания (не возрастания) количества голосов,
//отданных за ту или иную страну, с указанием количества отданных за неё голосов. При равенстве голосов страны следует упорядочить по алфавиту. 
//При этом каждая страна должна быть выведена ровно один раз, вне зависимости от того, сколько за неё было подано голосов.    
 
 n=int(input())
d={}
for i in range(n):
    c=input()
    if(d.get(c)==None):
        d[c]=1
    else:
        d[c]+=1
a=d.items()
a=sorted(a,key=lambda x:x[0])
a=sorted(a,key=lambda x:x[1],reverse=True)
for i in range(len(a)):
    print(a[i][0]+" "+str(a[i][1]))
    
//Расшифровка оценок
//Последнее время Артем увлекается шифрами. Вот и сейчас, когда его папа захотел увидеть оценки сына за месяц по информатике,
//Артем предоставил оценки в зашифрованном виде.
//В зашифрованном виде список оценок представляет собой строку s из цифр '0' и '1'. 
//Зашифровывая очередную оценку, Артем дописывает в конец строки s определенную последовательность цифр из нулей и единиц:
//при шифровании оценки «два» он дописывает к s строку '0',
//при шифровании оценки «три» он дописывает к s строку '100',
//при шифровании оценки «четыре» он дописывает к s строку '101',
//при шифровании оценки «пять» он дописывает к s строку '11'.
//Оценок «единица» («кол») Артем не получал. При шифровании очередной оценки соответствующая последовательность цифр
//из нулей и единиц дописывается без пробелов и каких-либо других разделителей.
//К счастью, папа Артема — программист. Он без труда может расшифровать оценки сына и сделать вывод о его успеваемости. 
//Известно, что одну из оценок (от двух до пяти) Артем получил большее количество раз, чем любую другую. 
//Напишите программу, которая расшифровывает заданную последовательность оценок и находит чаще других встречающуюся оценку.

//Пояснения к примерам:
//В первом примере Артем зашифровал последовательность оценок «5,4,5», поэтому наиболее частая оценка — «отлично». 
//Во втором примере Артем зашифровал последовательность оценок «3,4,4,2,5», поэтому наиболее частая оценка — «хорошо».    

s = input()
d = {'0':0,'100':0,'101':0,'11':0}
temp = ""
max = '0'
for i in s:
    temp+= i
    if(d.get(temp) != None):
        d[temp] += 1
        if(d[temp] > d[max]):
            max = temp
        temp = ""
switch = {'0':2,'100':3,'101':4,'11':5}
print(switch[max])

//ЕГЭ 2012-6
//Пользователю системы электронных денег доступно не более 12 счетов, каждый счёт имеет уникальное имя. 
//При добавлении средств сервер системы регистрирует имя счёта и сумму, при этом на счёт поступает 95% от суммы вносимых средств, 
//а 5% уходят на комиссию системы. Вам предлагается написать эффективную, в том числе по используемой памяти, программу, 
//которая будет составлять отчёт по пришедшим на сервер запросам и вычислять для каждого счёта сумму, поступившую на счёт, и размер комиссии.
//Следует учитывать, что количество запросов в списке может быть очень велико.
//Программа должна вывести уникальные имена всех счетов, встречающихся в списке, в порядке убывания (не возрастания) средств на счёте, 
//с указанием суммы на счёте и суммы комиссии по счёту за период, суммы вывести с точностью до двух знаков после десятичной точки. 
//При этом каждый счёт должен быть выведен ровно один раз. При равенстве сумм счета упорядочиваются по названиям в алфавитном порядке.

n = int(input())
d = {}
for i in range(n):
    c = input().split(',')
    if(d.get(c[0]) == None):
        d[c[0]] = int(c[1])
    else:
        d[c[0]] += int(c[1])
a = d.items()
a = sorted(a,key=lambda x:x[0])
a = sorted(a,key=lambda x:x[1],reverse=True)
for i in range(len(a)):
    print(a[i][0], f"{0.95*a[i][1]:.2f}",f"{0.05*a[i][1]:.2f}")
