//Задача 12. Степени пятерки
//Дано натуральное число N и целые числа a1,a2,…,aN. Найти количество чисел ai(i=1,2,…,N), являющихся степенями пятерки. 
//Решить задачу с помощью подпрограммы, которая позволяет распознавать степени пятерки.

def step(ch):
    count = 0
    while(ch % 5 == 0):
        count += 1
        ch //= 5
    if (ch == 1):
        return count
    else:
        return -1

count = 0
n = int(input())
list = list(map(int, input().split()))
for i in range(n):
    ch = step(list[i])
    if (ch != -1):
        count += 1
print(count)

//Задача 15. Гипотеза Гольдбаха
//Проверить гипотезу Гольдбаха: каждое четное число, большее двух, можно представить в виде суммы двух простых чисел. 
//Решить задачу с помощью подпрограммы, которая позволяет распознавать простые числа.

import math
 
def is_simple(n):
    for j in range(2, round(math.sqrt(n)) + 1):
        if n % j == 0:
            return False
    return True
 
num = int(input())
for i in range(2, num):
    if is_simple(i):
        for l in range(i, num):
            if is_simple(l) and num == i + l:
                print(f"{i} {l}")
                exit()
                
//Процедуры и функции. Задача 16
//Составьте процедуру, которая в данном одномерном массиве меняет местами минимальный и последний элемент.
//Если минимальных элементов в массиве несколько, выберите элемент с наименьшим индексом.
//Примените процедуру к каждому столбцу заданной прямоугольной матрицы.                

def shift(arr):
    minimum = arr.index(min(arr))
    tmp = arr[len(arr) - 1]
    arr[len(arr) - 1] = arr[minimum]
    arr[minimum] = tmp

n, m = map(int, input().split())
arr_first = [[int(j) for j in input().split()] for i in range(n)]
arr_sec = [[0 for j in range(n)] for i in range(m)]
for i in range(m):
    for j in range(n):
        arr_sec[i][j] = arr_first[j][i]
    shift(arr_sec[i])
for i in range(n):
    for j in range(m):
        print(arr_sec[j][i], end=' ')
    print()
    
//Процедуры. Задача 5
//Составить подпрограмму, которая заменяет в двумерном массиве четные элементы на нули.
//Проверить, будут ли равны два массива A и B после применения к ним этой подпрограммы.    

size_n,size_m = map(int,input().split())
a = [[0] *size_m] *size_n
b = [[0] *size_m] *size_n
for i in range(size_n):
    str = input()
    a[i] = [int(x) for x in str.split()]
for i in range(size_n):
    str = input()
    b[i] = [int(x) for x in str.split()]
for i in range(len(a)):
    for j in range(len(a[i])):
        if a[i][j] % 2 == 0:
            a[i][j] = 0
        if b[i][j] % 2 == 0:
            b[i][j] = 0
if a == b:
    print("YES")
else:
    print("NO")
    
//Процедуры. Задача 6
//Составить подпрограмму транспонирования прямоугольной матрицы. Получить транспонированнную матрицу для матрицы размерности n на m.  

def transpose(a):
    t_a = []
    for i in range(len(a[0])):
        lst_a = []
        for j in range(len(a)):
            lst_a.append(a[j][i])
        t_a.append(lst_a)
    return t_a
 
size_n,size_m = map(int,input().split())
a = [[0] *size_m] *size_n
t_a = [[0] *size_n] *size_m
for i in range(size_n):
    str = input()
    a[i] = [int(x) for x in str.split()]
t_a = transpose(a)
for i in range(len(t_a)):
    for j in range(len(t_a[i])):
        print(t_a[i][j],end=" ")
    print()
    
//Процедуры. Задача 8
//Составить подпрограмму перемножения матриц. С ее помощью вычислить n-ю степень квадратной матрицы A размера n на n.    

def proiz(a, b, k, c):
    for i in range(k):
        for j in range(k):
            c[i][j] = 0
            for p in range(k):
                c[i][j] += a[i][p] * b[p][j]
 
 
def copy(a, b):
    for i in range(n):
        a[i] = [0] * n
        for j in range(n):
            a[i][j] = b[i][j]
 
 
n = int(input())
arr, lst = [0] * n, [0] * n
for i in range(n):
    arr[i] = [0] * n
    lst[i] = [0] * n
    o = input().split()
    for j in range(n):
        arr[i][j] = float(o[j])
        lst[i][j] = float(o[j])
i = 1
while i < n:
    t = [0] * n
    copy(t, lst)
    proiz(arr, t, n, lst)
    i += 1
for i in range(n):
    print(' '.join(f"{j:.3f}" for j in lst[i]))
    
//Процедуры. Задача 14
//Дано N строк. В каждой из них есть несколько пар круглых скобок. 
//Написать подпрограмму, которая в данной строке удаляет круглые скобки вместе с текстом, который заключен между ними.
//Применить эту подпрограмму к каждой из данных строк.    

def delete(string):
    while(str.find(string, '(') != -1):
        index = str.find(string, '(')
        indexEnd = str.find(string, ')')
        string = string[:index] + string[indexEnd + 1:]
    return string

n = int(input())
list = []
for i in range(n):
    list.append(input())
for i in range(n):
    newStr = delete(list[i])
    print(newStr)
    
//Числа Фибоначчи
//Напишите функцию для вычисления k-го члена последовательности Фибоначчи.
//Последовательность Фибоначчи образуется по закону: f1=1,f2=1,fi=fi−1+fi−2(i=3,4,...).

def fib(n):
    if n<3:
        return 1
    return fib(n-1) + fib(n-2)

n = int(input())
print(fib(n))
